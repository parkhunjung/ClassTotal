--ex30_modeling.sql

/*

데이터베이스 구축
- 프로젝트 진행 > 다량의 데이터 > 조직적인 구조 생성 > 설계 + 구축
- 사람 + DBMS

데이터베이스 구축 단계
- 데이터베이스 모델링
- 데이터베이스 설계
- 데이터베이스 구축


- 데이터베이스 모델링
- 가장 초반에 하는 작업
- 가장 중요한 작업
- 설계도 작업(***)
- 데이터베이스를 구성하기 위해 필요한 정보(Raw 데이터) 수집 > 분석 > 도식화(설계도)
    > 최종 산출물 > ERD(Entity Relationship Diagram)
- 데이터베이스 모델링의 결과물 > ERD
- 아직 이 단계에서는 DBMS의 종류가 결정되지 않는다.

2. 데이터베이스 설계
- 실제 사용할 DBMS를 결정한다. > 오라클
- 모델링 결과물 > ERD(추상적) > 구체화하는 작업
- 식별자 생성, 자료형 지정, 제약 사항 추가 등..

3. 데이터베이스 구축
- 1~2의 결과물 > 현실화 > 물리적으로 만드는 단계
- SQL 언어 사용 (각종 CREATE, INSERT 등등..)

3.5 데이터 추가
- 더미 데이터 + 테스트용 데이터 > 더미데이터말고 직접 만들어서 넣는것이 좋다.

-----------------------------------------------------------

4. 응용 프로그램 구현
- 자바 + 오라클 연동 > 프로그램 구현




데이터베이스 모델링
1. ERD
- 엔티티 관계 다이어그램
- 여러 모델링 방법 중 하나 > 대표적 방법
- 손, 오피스, 전문툴(eXERD, ER-WIN 등)

2. 엔티티, Entity
- 다른 Entity와 분류될 수 있고, 다른 Entity들에 대해서 정해진 관계를 맺을 수 있는 데이터 단위
- ex) 회사 정보 관리 프로그램
    a. 사원 정보 관리
        - 정보 : 사원명, 나이, 사원번호, 연락처, 주소 등..
        - 사원 정보들의 집합 > '사원' 엔티티
    b. 부서 정보 관리
        - 정보 : 부서명, 부서번호, 사무실 번호, 내선번호 등..
        - 부서 정보들의 집합 > '부서' 엔티티

- 같은 성질의 속성들을 모아놓은 집합 > 대표 역할
- 테이블(= 레코드), 폴더(= 파일), 클래스(= 객체) 역할

3. Entity Relationship
- 엔티티간의 관계
- 테이블과 테이블간의 관계


4. Attribute, 속성(특성)
- 엔티티가 가지는 특성(정보)
- '사원' 엔티티 = 사원명,사원번호,연락처, 등등.. <- 하나하나가 속성
- 컬럼(= 셀 값, 데이터), 멤버 변수

5. Tuple, 튜플
- 엔티티에 정의된 규칙으로 만들어진 실제 데이터
- '사원' 엔티티 = 사원명,사원번호,연락처, 등등.. <- 하나하나가 속성
    > '홍길동' + A001 + 010-1234-5678 = 튜플
    

ERD에서 Entity, Attribute, Ralation 등을 표현하는 방법(그림 그리는 방법)

1. Entity를 그리는 방법
- 사각형으로 표시
- 이름은 대문자(권장)
- 중복 불가능(필수)
- 이름은 단수로 표기(권장)


2. Attribute
- Entity 안에 표기(목록 형태)
- 파스칼 표기법 + 전부 소문자 표기
- 단수로 표기(확정)
- 추가 표기사항(속성에 대한 기술)
    a. NN, Not Null
        - 해당 속성을 비워둘 수 없다.
        - 필수값
    b. ND, Not Duplicate > Unique
        - 해당 속성은 중복값을 가질 수 없다.
        - 유일값
    1. 중복되면 안되고, 생략되면 안된다(NN, ND)
        - #*속성명
    2. 생략되면 안된다(NN)
        - *속성명
    3. 중복되면 안된다.(ND)
        - #속성명
    4. 생략도되고, 중복도된다?
        - o속성명
        - optional
        
    
3. Relationship(**************)
- 엔티티와 엔티티간의 관계
- 행과 행간의 관계
- 속성과 속성간의 관계
- 이 단계에서 발생하는 대부분의 문제는 > 1 + 2가 원인

관계의 패턴(종류)
1 : 1, 1 : N
    - A테이블 <-> B테이블
a. 1 : 1          ㅁ-1----1-ㅁ 1:1
    - 1개의 A는 1개의 B로 구성
b. 1 : 0 관계     ㅁ-1----01-ㅁ 1:0 or 1:1
    - 1개의 A는 0개의 B로 구성(무관계)
c. 1 : N 관계     ㅁ-1----1<-ㅁ 1:1 or 1:N
    - 1개의 A는 1개이상의 B로 구성
d. 1 : N 관계     ㅁ-1----0<-ㅁ 1:0 or 1:N
    - 1개의 A는 0개이상의 B로 구성



키, key
- 속성, 컬럼
- 역할(의미)이 부여된 속성이나 컬럼

1. 기본키, Primary key
- 레코드(행)를 구분할 수 있는 역할
- 식별자

2. 후보키, Candidate key
- 레코드(행)를 구분할 수 있는 키
- 후보키들 중 대표로 선발된 키 > 기본키
- ex) 회원 엔티티(회원번호, 이름, 아이디, 주민등록번호 등..)
- 슈퍼키 중 최소성을 보장하는 키

3. 슈퍼키, Super key
- 복합키, Composite key
- 레코드(행)를 구분할 수 있는 키
- 1개의 키만 가지고는 식별자가 불가능한 키들 > 2개의 조합으로 기본키 역할

4. 대체키, Alternate key
- 후보키 중 기본키를 제외한 나머지 키

5. 외래키, Foreign key
- 부모 테이블의 기본키를 참조하는 키
- 테이블간의 관계를 정의

6. 일반키
- 1 ~ 5 중 아무것도 해당되지 않는 키


ERD의 종류
1. 논리 다이어그램, Logical Diagram
- 모든 식별자 > 한글 정의
- 엔티티와 속성 정도만 정의
- 관계 정의
- 업무 정의(파악) 사용


2. 물리 다이어그램, Phisical Diagram
- 실제 데이터베이스에 적용 > 식별자를 생성
- 자료형 + 제약사항 추가 등
- 구현 단계 사용

-------------------------------------------------------------------------------------- ERD + 모델링

정규화, Normaliztion
- 자료의 손실이나 불필요한 정보를 없애고, 데이터의 일관성을 유지하고, 
    데이터의 중복을 최소화하기 위해 자료 구조(테이블 스키마)를 수정하는 작업
- 우리가 만든 테이블(비정형) -> 정규화 -> 정규화된 구조
제 1 정규화 -> 제 2 정규화 -> 제 3 정규화 등..
- 1 ~ 3 정규화 + 역정규화

관계형 데이터베이스 시스템이 지향하는 데이터베이스의 상태
1. 최대한 null 상태의 셀을 가지지 않는다.
2. 중복값을 저장하지 않는다. (타입, 데이터 -> 완전히 동일한 성격의 데이터를 2군데 이상 동시 저장x)

정규화의 목적
1. null + 중복값을 제거
2. 자료 삽입, 갱신, 삭제에 따른 이상 현상 제거

이상 현상(Anomaly)
- 테이블 설계가 잘못되면 발생한다 > 현상 발생 제거하기 위해 테이블을 다시 설계 > 정규화

1. 삽입 이상(Insertion Anomaly)
- 특정 테이블에 데이터를 삽입할 때 원하지 않는 데이터까지도 같이 넣어야 하는 상황

2. 삭제 이상(Deletion Anomaly)
- 특정 테이블에서 데이터를 삭제할 때 원하지 않는 데이터까지 같이 넣어야 하는 상황

3. 갱신 이상(Update Anomaly)
- 동일한 데이터가 2개 이상의 테이블에 존재 > 그 중 1개를 수정했지만 다른 테이블의 데이터는 
    수정하지 못했을 경우 > 두 테이블의 데이터가 서로 달라지는 현상
    
함수 종속(Functional Dependency)
- 1개의 테이블내에서 2개이상의 속성(컬럼)들끼리 관계 제약
- 정규화는 '부분 함수 종속'이나 '이행 함수 종속'을 모두 없애고, 모든 컬럼들을
    '완전 함수 종속' 으로 만드는 작업이다.

1. 완전 함수 종속, Full Functional Dependency
2. 부분 함수 종속, partial Functional Dependency
3. 이행 함수 종속, Transitive Functional Dependency

정규화 종류
- 1NF ~ 3NF : Normal Form
- 비정규형 -> 정규화 -> 정규형
- 1개의 테이블 -> 정규화 -> 2개 이상의 테이블


제 1 정규화, 1NF
- 제 1 정규화를 만족하는 정규형의 규칙(***)
- 이 규칙을 만족하도록 테이블 수정 > 정규화한다.

- 모든 컬럼(속성)은 원자값을 가진다(*********)
    - 여러개의 값들을 하나의 컬럼에 두면 안된다.

조인 => 정규화 하기전의 테이블로 돌아가게 해주는 역할을 한다고 기억하자.

제 2 정규화, 2NF
- 기본키가 아닌 모든 컬럼은 기본키에 완전 함수 종속이어야 한다.(*****************)
    -> 부분 함수 종속이 발생했다. -> 부분 함수 종속을 제거한다.
- 항상 복합키를 사용할 때 발생한다. (유일한키가 2개의컬럼을 지정했을때)

제 3 정규화, 3NF
- 기본키가 아닌 다른 컬럼에 종속되는 컬럼이 존재하면 안된다.(***********************)
    -> 이행 함수 종속이 발생했다. > 이행 함수 종속을 제거한다.
    
역정규화
- 정규화된 결과를 다시 원래대로 되돌리는 작업
- 2개의 테이블 -> 1개의 테이블
- 수업 중 안함

모델링 툴 기능

1. 순공학, Forward Engineering
    - ERD > 실제 구현


2. 역공학, Reverse Engineering
    - 실제 구현 > ERD









*/


SELECT * FROM tblstaff;
SELECT * FROM tblproject;










































